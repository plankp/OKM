import std.io(:println(b), :println(i))

# SPADES = 0, ..., CLUBS = 3
# They have type Suit but has conversion to int
# Ints cannot convert to Suit, however
public enum Suit (
    SPADES, HEARTS, DIAMONDS, CLUBS
)

public enum FaceValue (
    ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN,
    JACK, QUEEN, KING
)

public struct Card (
    suit :Suit,
    value :FaceValue
)

Card new_card (suit :Suit, value :FaceValue) {
    card := new Card
    card.suit = suit
    card.value = value
    return card
}

# All things pass by value, structs included
unit mutate (card :Card) {
    card.suit = Suit.HEARTS
    card.value = FaceValue.QUEEN
}

unit cards () {
    ace_of_spades := new_card(suit: Suit.SPADES, value: FaceValue.ACE)

    copy_of_card := ace_of_spades
    copy_of_card.suit = Suit.HEARTS

    # The following two lines should be both true
    println(b: copy_of_card.suit == Suit.HEARTS)
    println(b: ace_of_spades.suit == Suit.SPADES)

    # This here will not mutate ace_of_spades due to pass by value
    mutate(card: ace_of_spades)
    println(b: ace_of_spades.suit == Suit.SPADES)

    # This here will mutate ace_of_spades because we pass a pointer
    mutate(card: &ace_of_spades)
    println(b: ace_of_spades.suit == Suit.HEARTS)

    # Following pass by pointer, you can also store a pointer
    copy_of_copy := &copy_of_card
    copy_of_card.suit = Suit.SPADES
    println(b: copy_of_copy.suit == Suit.SPADES)

    copy_of_copy.suit = Suit.DIAMONDS
    println(b: copy_of_card.suit == Suit.DIAMONDS)

    suit_of_card := ace_of_spades.suit
    suit_of_card = Suit.CLUBS
    println(b: ace_of_spades.suit != Suit.CLUBS)

    # Store pointers to struct fields
    # Useful when you have field of structs inside other struct
    suit_of_card = &ace_of_spades.suit

    # # The commented out line does not mutate the pointer
    # # Hence the previous *Useful when...* line
    # suit_of_card = Suit.CLUBS

    # Although you could use pointer as a View-handle
    ace_of_spades.suit = Suit.SPADES
    println(b: suit_of_card == Suit.SPADES)
}