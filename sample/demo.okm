import std.io
import std.math(PI, :atan2(y, x), :sin(rad))

import rel.vis

# This function (since it has the same name as the module)
# is used to initialize the module. Runtime automatically
# call it (think of the static block in java). Since it is
# a function, the user is allowed to call it themselves.
unit demo() {
    a, b :double;

    # a must equal b (they call the same function)
    a = atan2(y: 20, x: 50);
    b = :atan2(y, x)(20, 50);

    # C equals yields 0
    c := sin(rad: PI);

    yield10();

    k := 1s + -2b   # Size should be 16 not 32

    q := 1
    q = q           # This line will be optimized away
    p := q = k

#    fact_5 := fact_aux (n: 5, acc: 1)
    three := sum(a: 1, b: 2)
    count_down(from: yield10())

    return demo2(a: k)
}

unit count_down (from :int) =
    if from
        count_down(from: from - 1)
    else
        println(i: from)

int fact_aux (n, acc :int) =
    if n < 2
        acc
    else
        fact_aux(n: n - 1, acc: n * acc)

unit demo2(a :int) {
    # a :int;
    # a = 1 + 2 (20);
    return
}

int yield10() {
    return 2 * 5 + 2 * 0
}

unit demo3() {
    if false {
        d :long
        a := 1 + -2
        b := true
        c := a + 2
        d = c

        j := 0.1 + 0.2
    }

    # We manually return everything for now
    return
}

int sum(a, b :int) {
    return a + b
}